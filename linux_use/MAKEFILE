Makefile 的理解


1. Makefile 文件如下：
	#如果已定义KERNELRELEASE,则说明是从内核构造系统调用的，
	#因此可以利用其内建语句
	ifneq ($(KERNELRELEASE),)
		obj-m := hello.o
	#否则，是直接从命令行调用的
	#这时要调用内核构造系统
	else
		KERNELDIR ?= /lib/modules/$(shell uname -r)/build
		PWD := $(shell pwd)
	default:
		$(MAKE) -C $(KERNELDIR) M=$(PWD) modules
		@echo 'OK'
	endif

2.  首先解释下makefile中的几点：

	$(KERNELRELEASE)--KERNELRELEASE也是一个变量，可以在内核树的主makefile中找到。

    $(MAKE) -C $(KERNELDIR)  --KERNELDIR在前面定义了，是指内核树的根目录。
    -C选项的作用是将当前的工作目录转移到你所指定的目录，我们这里指定为内核
    树的根目录，/lib/modules/$(shell uname -r)/build指向的就是内核树的根目录，
    build是个软链接。 uname -r是shell命令，显示当前的内核版本号，我的是2.6.35.

    M=$(PWD)--M=选项让该makefile在构造modules目标之前，返回到当前目录。
    一般这个makefile和驱动模块的代码在一起，就是返回到驱动模块代码所在的目录。
    “M=” 选项的作用是，当用户需要以某个内核为基础编译一个外部模块的话，
    需要在make modules 命令中加入“M=dir” ，程序会自动到你所指定的dir 目录中查找模块源码，
    将其编译，生成KO 文件。

	modules--目标指向obj-m变量中设定的模块。

3.  流程分析

	执行make

	首先检查KERNERRELEASE变量，发现没有定义，所以，走else,接下来定义了两个变量KERNELDIR和PWD。

	然后会走进default.

	注意： 此时会因为 -C $(KERNELDIR)进入内核树根目录,执行内核树根目录下的主makefile,
    这个makefile中有我们前面提到的变量的声明，KERNELRELEASE。内核树里的主
    makefile会根据M=选项，执行M=选项指向的目录处的驱动代码的makefile。
    其实这是第二次读这个makefile了。

	然后根据M=选项指向的模块目录，再执行驱动代码位置的makefile，
	也就是前面粘帖下来的makefile。你可能会有疑问，那这个makefile不是被读了两遍了吗？
	是的。就是读了两遍，但是两遍结果并不相同。
	因为第二遍的时候，KERNELRELEASE 变量有了定义。于是走了ifneq分支，obj-m有了定义，
	此时才真正的编译内核模块。编译完模块，会离开内核树的目录，回到M=选项指向的目录。

 

	一个标准的模块编译过程，makefile是要被读两次的。

 

	采用这种makefile的好处是,既可以将驱动模块放在内核树里面编译(/usr/src/linux/driver/),
	也可以将驱动模块放在内核树外面,都可以编译通过.


